1.
Describe the five arithmetic operators in C. Summarize the rules associated with their use.
Ans.
The five arithmetic operators are:
+ addition
- subtraction
* multiplication
/ division
% remiander opeartor
* / and % has higher precedence than + and -
Associativity of these operators is left to right

2.
Summarise the rules that apply to expressions operands of which are of different types.
Ans.
An expression is a statement that consist of operands and operators
An operand can be constants or identifiers (variable name of type int char float array pointer function structure union, etc)
An expression that evaluates a value can also be used in place of an operand.

3.
How can the value of an expression be converted to a different data type? What is it called?
Ans.
Value of an expression can be converted to a different data type using type casting operator. This process is called type casting and the operator used is ()

4.
What is meant by operator precedence? What are the relative precedences of arithmetic operators?
Ans.
The sequence in which the operators are evaluated in case an expression contains multiple arithmetic operators is called opeartor precedence.
* / and % are in one precedence group (higher)
+ and - are in one precedence group (lower)

5.
What is meant by associativity? What is the associativity of arithmetic operators.
Ans.
The sequence in which operators of same precedence group must be evaluated is called associativity.
Associativity of arithmetic operators is left to right.

6.
What are unary operators? How many operandsa re associated with unary operator?
Ans.
Unary operators require one operand to complete their operations.
Unary operators are:
- negation operator
++ increment
-- decrement
() type cast
sizeof
! logical not operator

7.
Describe the six unary operators discussed in this chapter. What is the purpose of each?
Ans.
- negation operator - to reverse the sign of its operand
++ increment operator - to increase the value of its operand by 1
-- decrement operator - to decrease the value of its operand by 1
sizeof returns the size of its operand in bytes
! logical not - reverses the value of its operand

8.
Describe two different ways to utilize the increment and decrement operators. How do the two methods differ?
Ans.
Two ways to use the increment and decrement operators are - pre increment and post increment, pre decrement and post decrement
Its importance applies when used with some other operand.
Eg:
a = 5 + ++a; //here value of a is first incremented and then used in addition
a = 5 + a++; //here value of a is used in addition and then its value is incremented
a = 5 - --a; //here value of a is first decremented and then used in subtraction
a = 5 - a--; //here value of a is first used in subtraction and then decremented
When these operators are used alone with an operand the result remains same for pre increment and post increment or pre decrement and post decrement
eg: a++ and ++a gives same result and a-- and --a gives same result

9.
What is the relative precedence of unary operators when compared to arithmetic operators? What is their associativity?
Ans.
Unary operators have higher precedence than the arithmetic operators.
Their associativity is right to left

10.
How can the number of bytes allocated to each data type be determined for a particular C compiler?
Ans.
Number of byte allocated to a particular variable can be determined using sizeof operator.
eg: sizeof(num);

11.
Describe the four relational operators included in C. With what type of operands can they be used? What type of expression is obtained?
Ans.
> greater than - this returns tru if operand1 is greater than the opearnd2, false otherwise
>= greater than or equal to - this returns true if operand1 is greater than or equal to operand2, false otherwise
< less than - this returns true if operand1 is less than operand2, false otherwise
<= less than or equal to - this returns true if operand1 is less than or equal to operand2

12.
What are the relative precedences of the relational, equality and logical operators with respect to one another and with respect to the arithmetic and unary operators? What are their associativity.
Ans.
Unary opeartors								R->L
Arithmetic operators * / %					L->R
Arithmetic operators - +					L->R
relational operators > < >= <=				L->R
relational equality operators == !=			L->R
logical && operator				    		L->R
logical || operator							L->R
Assignment operators						R->L

13.
How is the type of an assignment expression determined when the two operands are of different data types? In what sense is this situation sometimes a source of programming errors?
Ans.
When two operands are of different data types, the operand with lower precedence is upgraded to higher precedence.
eg addition between int and float, int is upgraded to float.
This can sometimes lead to programming errors if this assumption is not taken care of or required type casting is not done.

14.
What is the precedence of assignment operator relative to other operators? What is their associativity?
Ans.
Assignment operator has lowest precedence as compared to the other operators. Its associativity is right to left.

15.
Describe the use of the conditional operator to form conditional expressions. How is a conditional expression evaluated?
Ans.
A conditional expression is formed using one or more relational expressions. Each relational expression uses a relational operator. If multiple relational expressions are used, they are combined using logical operators.

16.
How can the conditional operator be combined with the assignment operator to form if-else type statements.
Ans.
Conditional operators along with an assignment operator can be converted to if else type statement using ternary operators.
eg:
<variable> = <expression1>?<expression2>:<expression3>
expression1 is evaluated
If expression1 evaluates to true, variable is assigned expression2 else variable is assigned expression3

17.
What is the precedence of the conditional operator relative to the other operators as described in this chapter? What is its associativity?
Ans.
Unary operators						R->L
Arithmetic operators * / %			L->R
Arithmetic operators - + 			L->R
relational operators > < >= <=		L->R
relational equality operators == !=	L->R
logical &&							L->R
logical ||							L->R
Assignment operator					R->L

18.
Are the library functions actually part of the C language?
Ans.
Library functions are not part of the C programming languages, but they come along with the C compiler.