1.
Answer the following questions as they pertain to your particular C compiler or interpreter.
a) Can an entire structure variable or union variable be assigned to another structure or union variable provided both variables have same composition?
Ans. Latest C compilers allow assignment of on structure variable or union variable to another structure variable or union variable provided they both have same composition.
b) Can an entire structure variable or union variable be passed to a function as an argument?
Ans. Latest C compilers allow an entire structure variable or union variable to be passed to a function as an argument.
c) Can an entire structure variable or union variable be returned from a function to its calling routine?
Ans. Latest C compilers allow an entire structure variable or union variable to be returned to the calling routine.
d) Can a pointer to a structure or union be passed to a function as an argument?
Ans. A pointer to a structure or union can be passed to a function as an argument.
e) Can a pointer to a structure or union be returned to its calling routine?
Ans. A pointer to a structure or union can be returned to the calling routine.

2.
Write a program to return customer records in such a way that the function search returns a complete structure rather than a pointer to a structure.
Ans.
#include<stdio.h>
#include<stdlib.h>

#define TRUE 1
#define FALSE 0
#define SIZE 3

typedef int BOOL;

//declaration of structure to store customer information
struct record
{
	char* name;
	int account_number;
	char account_type;
	float balance;	
};

//function declaration - search function
struct record Search(struct record[],int,BOOL*);

int main(void)
{
	//initialise the customer records - array of 3 records
	struct record customer[SIZE] = {{"Anwesha",3333,'C',33.33},{"Utkarsh",6666,'O',66.66},{"Hemalata",9999,'D',99.99}};
	
	int search_account_number = 0;
	struct record search_customer_record;
	BOOL flag = FALSE;
	
	printf("Enter account number to search, enter 0 to end search: ");
	scanf("%d",&search_account_number);
	
	while(search_account_number != 0)
	{	
		search_customer_record = Search(customer,search_account_number,&flag);
		
		if(flag == TRUE)
		{
			printf("Customer record found\n");
			printf("Customer name = %s\n",search_customer_record.name);
			printf("Account number = %d\n",search_customer_record.account_number);
			printf("Acocunt type = %c\n",search_customer_record.account_type);
			printf("Balance = %f\n",search_customer_record.balance);
		}	
		else if(flag == FALSE)
		{
			printf("Record not found\n");
		}
		
		printf("Enter account number to search, enter 0 to end search: ");
		scanf("%d",&search_account_number);
	}	
	
	exit(0);
}

struct record Search(struct record table[],int search_account_number, BOOL* flag)
{
	int i = 0;
	struct record search_record = {"\0",0,'O',0.0};
	
	for(i=0;i<SIZE;i++)
	{
		*flag = FALSE;
		if(table[i].account_number == search_account_number)
		{
			*flag = TRUE;
			search_record = table[i];
			break;
		}
	}
	return search_record;
}
=============================================================================================

3.
Modify the billing program so that any of the following reports can be displayed:
a) Status of all customers
b) Status of overdue and delinquent customers only
c) Status of delinquent customers only
Ans.

