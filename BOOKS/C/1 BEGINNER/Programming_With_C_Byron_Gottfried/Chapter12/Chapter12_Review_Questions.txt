1.
What is a structure? How does a structure differ from an array?
Ans.
Structure is a user defined data type that can contain heterogenous data elements stored in contigous memory locations. An array contains homogenous data elements stored in contigous memory locations. 
Array elements are accessed using name of the array and their subscript or index eg arr[2]
Structure members are accessed using structure object name followed by dot operator and name of the member eg student.name
Structure members are also accessed using pointer to structure object followed by arrow operator and name of member eg: pstudent->name;

2.
Describe the syntax for defining the composition of a structure. Can individual members be initialised within structure type declaration?
Ans.
Structure data type definition uses struct keyword followed by name followed by members of structures enclosed in curly braces {}. Members should include data type and member name.
eg:
struct Student
{
	char name[50];
	int age;
};
Individual members of a structure cannot be initialised as no memory is allocated at the time of structure type declaration.

3.
How can structure variables be declared? How do structure variable declaration differ from structure type declaration?
Ans.
A structure variable can be declared using the name of the structure followed by name of the variable.
eg: Student sobj;
At the time of structure variable declaration, memory is allocated. But no memory is allocated at the time of structure type declaration.

4.
What is a tag? Must a tag be included in a structure type definition? Must a tag be included in a structure variable declaration? Explain the complete process.
Ans.
Name given to a structure data type is a tag. Tag is not compulsory at the time of structure type definition. But it must be included at the time of structure variable declaration.
If tag name is not used, structure object should be created at the time of structure type definition. Else object of such a structure cannot be created later (if tag is not used at the time of structure type definition). 
eg:
Method 1 - tag is used
struct Student
{
	char name[50];
	int age;
};
Student sobj;
Method2 - tag not used
struct
{
	char name[50];
	int age;
} sobj;

5.
Can a structure variable be defined as a member of another structure? Can an array be included as member of structure? Can an array have structures as elements?
Ans.
A structure variable can be defined as a member of another structure. An array can also be a member of structure and we can also have an array of structure elements.
Eg:
struct Date
{
	int day;
	int month;
	int year;
};
struct Student
{
	char name[50];
	int age;
	Date date_of_birth;
};
Student sobj[50];

6.
How are the members of a structure variable assigned initial values? What restrictions apply to the structure's storage class when initial values are assigned?
Ans.
Members of a structure variable can be assigned at the time of variable definition by specifying the initial values enclosed in {} seperated by a comma in the same sequence as the members are defined in the structure definition.
Only structure variables declared as global or auto static can be initialised.

7.
What is the scope of a member name? What does this imply with respect to the naming of members within different structures?
Ans.
Scope of a member variable of a structure is within that structure. This implies that we can have two members with same name in two different structure definitions but the member name should be unique within the structure definition.

8.
How is a structure member accessed? How can a structure member be processed?
Ans.
A structure member can be accessed using name of structure variable followed by period operator followed by member name.
A structure member can be processed in a similar way.
eg:
structure Date
{
	int day;
	int month;
	int year;
};
structure Date birth_of_date;
birth_of_date.day = 12;
birth_of_date.month = 07;
birth_of_date.year = 1983;
printf("Birthdate is %d-%d-%d\n",birth_of_date.day,birth_of_date.month,birth_of_date.year);

9.
What is the precedence of the period (.) operator? What is its associativity?
Ans.
A period operator falls in highesh precedence group. Its associativity is left to right.

10.
How can size of a struture be defined? In what units is the size reported?
Ans.
Size of a structure can be defined using sizeof operator. It is reported in terms of number of bytes.

11.
What is the purpose of typedef feature? How is this feature used in conjunction with structures?
Ans.
typedef is used to give a new name to an existing data type.
It can be used to rename a structure data type so that we do not have to use the keyword "struct" every time we define a structure variable. It can also be used to rename complex structure data types like pointer to structure.

12.
How is a structure type pointer variable declared? To what does this type of variable point?
Ans.
A structure type pointer variable is declared as struct <struct data type name>* <name of pointer variable>
This variable hold the address of a structure variable.

13.
What is the precedence of the -> operator? What is its associativity?
Ans.
The arrow operator -> falls in the highest precedence group.
Its assiciativity is left to right

14.
Suppose a pointer variable points to a structure that contains another structure as a member. How can a member of embedded structure be accessed?
Ans.
Member of embedded structure can be accessed as follows:
<outer structure variable>.<embedded structure variable>.<embedded structure member name>

15.
Suppose a member of a structure is a pointer variable? How can the object of the pointer be accessed, in terms of structure variable name and the member name?
Ans.
Object of a pointer can be accessed using the indirection operator (*)
eg:
struct Date
{
	int day;
	int month;
	int year;
};

struct Date* pbirth_date;
*pbirth_date.day = 12;
*pbirth_date.month = 7;
*pbirth_date.year = 1983;

16.
What happens when a pointer to a structure is incremented? What danger is associated with this type of operation?
Ans.
When a pointer to a structure variable is incremented it is incremented by the size of the structure variable. It points to the memory location immediatey after the structure varaiable. This memory location may not be part of the address space of the prgram.

17.
How can an entire structure be passed to a function?
Ans
An entire structure can be passed to a function by passing the address of the structure variable.

18.
How can an entire structure be returned from a function?
Ans.
An entire structure can be returned from a function by returning the pointer to the structure variable.

19.
What is a self referential structure? For what kinds of applications are the self referential structures useful?
Ans.
A self referential structure is one in which one of the member is a pointer of type same structure data type. It can point to a variable of same structure data type. Such a structure is used in defining data strutures linked lists and trees

20.
What is a union? How does a union differ from a structure?
Ans.
A union is a user defined data type which can contain members of heterogenous data types. But the memory allocated is equal to the size of the largest member of the union. Where as in structure the memory allocated is equal to the sum of size of all the members of the structure

21.
For what kinds of applications are unions useful?
Ans.
Unions are useful for applications where same memory location needs to be used for different purposes. Same memory location is used by multiple variables but only one variable value is stored at a time.

22.
In what sense can unions, structures and arrays be intermixed?
Ans.
They are all used for storing multiple data elements.

23.
How is union member accessed? How can a union member be processed?
Ans.
Union member is accessed using name of the union variable followed by the period operator and name of the member.
It can also be accessed using the pointer variable pointing to union variable followed by arrow opeartor and name of the member.

24.
How is member of a union variable assigned an initial value? In what ways does the initialisation of a union variable different from the initialisation of a structure varaiable?
Ans.
A union variable can be initialised at the time of variable definition by using assignment operator followed by a value enclosed in curly braces. Single value needs to be specified and it is assigned to the first member of the union.
A structure variable initialisation involves specifying multiple value each for a member enclosed in curly braces and seperated by comma.
The values must be specified in the same sequence as the members are defined in the structure definition.

25.
Summarize the rules that apply to processing unions. Compare with the rules that apply to the processing of structure.
Ans.
A union variable can be processing using the union varaible name and period operator or an arrow operator followed by the member name.
At a time only one union member can be assigned a value and processed as the memory is shared between the members. But in case of a structure every member of the structure variable gets memory.
