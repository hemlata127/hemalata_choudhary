1. Draw the block diagram of a computer and explain various blocks
Ans. A computer is a digital device. It is programmable. It consists of:
CPU - which is the brain of the computer. A fixed number operations are implemented in the CPU chip in hardwired manner, like arithmetic, logical, data transfer operations.
Memory - CPU reads the data and instructions from the memory
IP devices - that provide the input. The input goes in the computer memory
OP devices - display the output from the memory. OP can be in the form of text, graphics, sound, etc

2. What are the various types of memory. How do they differ from each other
Ans. Two types of memory are:
Primary memory - RAM + ROM. The CPU reads data and instructions from primary memory. Programs to be executed are loaded in primary memory.
It is free electronic space - made of semiconductors. The data stored here is transient. When power supply is stopped, the data is erased
Secondary memory - HD, floppy disk, CD, etc. Data is stored using magnetism. Data is permanent here - doesnt need continous supply of power.
Power is needed to read and write the data (from primary memory to secondary memory, from secondary memory to primary memory)

3. Compare the use and working of primary and secondary memory
Ans. CPU reads from primary memory only. Hence the data and instructions must be loaded in primary memory at the time of execution. The program to be executed is loaded in the primary memory. It is electronic memory made of semiconductors and the data is transient. Data in the primary memory is wiped when the power is turned off. To store the data permanently, secondary memory is needed. It stores data using magnetism.

4. What is the need of an operating system? What are its responsibilities?
Ans. Operating system provides an environment for the execution of the programs. It acts as an interface between the hardware and the user programs.
It performs following tasks:
- File system management
- Process management
- memory management
- CPU scheduling
- Hardware abstraction

5. What are the various types of operating systems. Compare their features and working.
Ans. DOS - command based - single user OS
Unix - command based, Some flavors also provide GUI interface. It is multiuser operating system
Windows - GUI based operating system.

6. Explain the tree structure of storage system. Differentiate between absolute addressing and relative addressing of files.
Ans. Storage system stores the files in the form of inverted hierarchical tree structure with root file at the top that has branches and sub branches.
A non leaf node can be only a directory. A leaf node can be a regular file, special file or empty directory. Each file in this tree structure is represnted by its path. The path staring from root directory is absolute path and the path with reference to the current directory is relative path.
Absolute path of a file is always unique in a file system.

7. Write an algorithm and pseudo code for finding:
i) Minimum out of three numbers
Algorithm
Read number1, number2, number3
if number1 is greater than number2 and number1 is greater than number3
	print number1 as largest
otherwise if number2 is greater than number1 and number2 is greater than number3
	print number2 as largest
otherwise print number3 as largest

Pseudo code
START
	Read number1, number2, number3
if number1 > number2 and number1 > number3
	Print number1
if number2 > number1 and number2 > number3
	Print number2
else
	Print number3
STOP
	
ii) Maximum out of four numbers
Algorithm
Read number1, number2, number3, number4
if number1 is greater than number2 and number1 is greater than number3 and number1 is greater than number4
	print number1 as maximum number
otherwise if number2 is greater than number1 and number2 is greater than number3 and number2 is greater than number4
	print number2 as maximum number
otherwise if number3 is greater than number1 and number3 is greater than number2 and number3 is greater than number4
	print number3 as maximum number
otherwise
	print number4 as maximum number
	
Pseudo code
START
	Read number1, number2, number3, number4
if number1 > number2 and number1 > number3 and number1 > number4
	print number1
if number2 > number1 and number2 > number3 and number2 > number4
	print number2
if number3 > number1 and number3 > number2 and number3 > number4
	print number3
else
	print number4

iii) Factorial of a number
Algorithm
Read number
Assign number to a variable n
Check value of n and repeat following steps till value of n is greater than 1
	answer = answer * n
	decrement n
Print value of answer

Pseudo code
START
	Read number
	Read number into n
	Declare integer variable answer
	if n > 1
		answer = answer * n
		n = n - 1;
	print answer
STOP

iv) Smallest out of n numbers
Algorithm
Read the value of n
Read the n numbers into an array arr
Assign 1st number arr[0] to a variable min
Assign i = 1
Repeat following steps till i is less than or equal to n
	if arr[i] is smaller than min
		then min = arr[i]
	increment value of i
print the value of min

Pseudo code
START
	Read n
	Read n numbers in array arr
	min = arr[0]
	i = 1
	while i >= n
		if arr[i] < min
			min = arr[i]
		i = i+1
	print min
STOP

8. List the various phases of software development and describe each briefly
Ans. Following are the different phases of software development:
i) Requirement gathering and understanding
Understand the problem, collect all the requirements, thoroughly understand the requirements
ii) Design phase
Come up with the solution of the problem.
Decide the programming language to implement the solution
iii) Development
Implement the solution
iv) Testing and defect fixing
Test the software for various combinations of input
FInd the defects, fix the defects and retest the software
v) Installation and maintenance
Deploy the software

9. How is structured programming done? What problems might be faced if program is not developed in structured way?
Ans. Structured programming is a programming paradigm where the program is developed using well structured modules.
GOTO statements are not used. Hence there is no random flow of control. The program is easy to implement, understand and it is easy to follow the program flow. Following control flow structures are used:
i) Sequence
ii) Selection
iii) Iteration
If the program is not developed in structured way, the control flow of the program is random. The program is difficult to understand and debug.

10. What is machine language? How does it differ from high level languages?
Ans. Machine language is written in the binary format in terms of 0 and 1. Microprocessor can directly read and execute the program written in machine language. It is very difficult for humans to code and understand machine language. A high level programming language is closer to natural or English language. It is more intuitive. Level of detailing is reduced in high level programming language

11. Name some commonly used high level languages. What are the advantages of using high level languages?
Ans. C, C++, Java, Python are some of the high level languages. Advantages of high level languages:
1. It is easy to learn a high level language as it is similar to natural language which is familiar to humans
2. Level of detailing is highly reduced in high level languages. The detailing is taken care by the translators.
3. It uses words, expressions, statements that are familiar to humans. 
4. It is easy to understand and debug a program written in high level languages

12. What is meant by compilation? What is meant by interpretation? How do these two processes differ?
Ans. When the entire program is written in any high level programming language, it is given to the compiler for compilation which converts it into an object code. The process of converting source code written in high level programming language to an object code is called compilation.
An interpreter reads the source code written in high level programming language one line at a time and converts it into object code and executes it.
Program execution is slower when interpreter is used as compared to when compilation process is used.

13. What are the major components of a C program? What significance is attached to the main()?
Ans. A C program is a collection of functions
It must have at lease one function. If there is only one function, it must be main. It is the entry point function from where program execution begins.
Major components of C program:
i) Header file inclusion statements
ii) Function declarations
iii) Global variable declarations
iv) Function definitions

14. How can comments be included in a C program? Where can comments be placed?
Ans. Multiline comments can be added to a C program using /* */
Single line comments can be included using //
Comments can be included anywhere in a C program.
Comments are not read/handled by the compiler. They are for programmer to provide more information about certain section of code in source file.

15. Are C programs required to be typed in lower case? Is upper case ever used in C program? Explain.
Ans. C is a case sensitive programming language. Here upper case and lower case are treated seperately. A C program should be typed in lower case.
Upper case can also be used whereever necessary. Macros are defined in upper case.

16. Why are some of the statements in C program indented? Why are empty lines included within a typical C program?
Ans. Some statements are indented in C program for better readability. Statements at one indentation level belong to one block.
They are enclosed in curly braces.
Empty lines are included to make a C program more readable and clear. Emply lines form part of white spaces. They are ignored by the compiler.

17. Summarise the meaning of each of the following:
integrity - when the program developed is of high quality
clarity - when it is easy to go through the program and understand the code. It is easy to follow the control flow of the program.
simplicity - Instead of following complex approaches, following simple approaches. This makes the program easy to maintain, expand, use and study.
efficiency - when the program is able to perform a task with more precision in less amount of time, it is said to be efficient
modularity - breaking down the entire program into smaller modules. In this way programming becomes easy. It is easier to isolate a defect.
generality - making program general enough so that it can be used with multple set of data

18. Compare top down and bottom up approaches of program design.
Ans. In top down approach of programming high level modules are developed and tested first and then sub modules and their sub modules are developed.
In bottom up approach, low level modules are developed first, moving upwards and then higher level modules are developed.
