1.
What is the purpose of the if-else statement?
Ans.
if-else statement is used for conditional execution. A conditional expression is evaluated that gives a boolean output which is true or false. Based on the output of the conditional expression evaluation, statements in either if block or else block are executed.

2.
Compare the use of the if-else statement with the use of the ?: operator. In particular, in what way can the ?: operator be used in place of an if-else statement?
Ans.
The ternary operator ?: can be used if the if else statement has a single execution statment in if block and else block.
expression1?expression2:expression3
if expression1 is true, expression2 is returned else expression3 is returned.

3.
How are nested if-else statements interpreted? In particular, how is the following interpreted?
if e1 if e2 s1
		else s2
Which logical expression is associated with the else clause?
Ans.
If expression 1 evaluates to true, expression 2 is evaluated
if expression 2 evaluates to true, statement s1 is executed, other wise statement s2 is executed
Logical expression e2 is associated with the else clause

4.
What is the purpose of the while statement? When is the logical expression evaluated? What is the minimum number of times that a while loop can be executed? How is the execution of a while loop terminated?
Ans.
While loop is used to repeat the execution of certain group of statements untill a condition turns false. The logical expression is evaluated at the beginning of the while loop in each pass. If the logical expression evaluates to false in the first pass itself, the body of while loop is not executed. Hence the minimum number of times a while loop can be executed is 0.

5.
What is the purpose of a do while statement? How does it differ from the while statement?
Ans.
do while statement executes a group of statements and then evaluates a logical expression. If it evaluates to true, it repeats the execution till te condition becaomes false. Unlike while statement, do while executes at least once. It is a rear testing loop.

6.
What is the minimum number of times that a do-while loop can be executed? How does it differ from a while statement?
Ans.
A do-while loop executes at least once. It is a rear testing loop. While loop is front testing loop and hence the minimum number of times a while loop can execute is 0.

7.
What is the purpose of the for statement? How does it differ from the while statement and the do while statement?
Ans.
A for statement is used to repeat a set of instructions certain number of times. Condition initialisation, condition checking and condition alteration takes place in a single statement. For loop should usually be used when the number of passes is known in advance..
In while and do-while loop, the condirion initialisation, checking and alteration happens in different statements. These should be used when the number of passes are not known in advance.

8.
How many times will a for loop be executed? Compare with the while loop and do while loop.
Ans.
The number of times a for loop should be executed is mentioned in the for statement. This is known in advance.
eg: for(i=1;i<=n;i++) this will be executed n times.
A while and a do-while loop should usualy be executed when the number of passes are not known in advance.

9.
What is the purpose of the index in a for statement?
Ans.
The index or loop counter controls the for loop and decides the number of passes.
The counter initialisation, condition checked and increment or decrement of the counter takes place in for statement.
eg:
for(i=5;i<=10;i++)
{
}

10.
Can any of the three initial expressions in the for statement be omitted? If so, what are the consequences of each omission?
Ans.
if initialisation is mitted, garbage value or what of loop counter will be considered which may give unexpected results.
If condition checking is omitted, the body will always be executed and if increment or decrement expression is omitted, the loop body will be executed for ever.

11.
What rules apply to nesting of loops? Can any type of loop be embedded within another?
Ans.
A loop within another loop is called nesting of loop.  Any loop can be embedded within another loop.
Inner loop will complete all iterations for every single iteration of the outer loop.
Proper matching braces should be used for inner loops and outer loops.

12.
Can loops be nested within if-else statements? Can if-else statements be nested within loops?
Ans.
Loops can be nested within if-else statements. if-else statements can also be nested within loops.

13.
What is the purpose of the switch statement? How does this statement differ from the other statements sescribed in this chapter?
Ans.
A switch statement is used to implement multiple if-else-if statements. 
eg:
switch(expression)
{
case 'a':
	{
	
	}
	break;
case 'b':
	{
	
	}
	break;
default:
}
expression in switch statement should evaluate to an integer value. label for case should be a compile time constant.
If the number of cases is more than 5, an internal jump table which is an array of addresses is maintained and performance benefit of switch is achieved. Otherwise it is internally converted to normal if-else-if statements.

14.
Summarise the syntactic rules associated with the use of the switch statement. Can multiple case labels be associated with one alternative?
Ans.
switch expression should evaluate to an integer.
case labels should be compile time constant. 
case labels should be in increasing order.
To achieve performance benefits of switch statement, there should be at least 5 case blocks
Multiple case labels can be associated with one alternative.

15.
What happens when the value of the expression in the switch statement matches the value of one of the case labels? What happens when the value of this expression does not match any of the case labels?
Ans.
When value of expression in the switch statement matches the value od one of the case labels, then the statements written in the case are executed.
When no matches are found, statements in default label are executed if no default label is defined, the switch block ends and no statements are executed.

16.
Compare the use of switch with nested if-else. Which is more convenient?
Ans.
A switch control structure can be used to replace the nested if-else. If the number of nested if-else increases the nesting and indentation level increases which makes the code difficult to understand, change and maintain.
Switch statement make this implementation more clear. Using switch control structure is more convenient than nested if-else

17.
What is the purpose of the break statement? Within which control statements can the break statement be included?
Ans.
break statement inside a loop is used to skip execution of all the remaining statements in current iteration and all remaining iterations and come out of the loop. A break statement can be used inside a for, while, do-while loops and case block inside switch control structure.

18.
Suppose a break statement is included within the innermost of several nested control statements. What happens when the break statement is executed.
Ans.
If a break statement is used within the innermost of several nested control statements, when it is executed, control comes out of the corrent loop only (innermost loop which has break statement).

19.
What is the purpose of the continue statement? Within which control statements can the continue statement be included? COmpare with the break statement.
Ans.
continue statement is used to skip the execution of remaining statements of the current iteration and move to the next iteration. It can be used in for, while and do-while loops. break statement is used to skip the remaining statements of current iteration and all remaining iterations and come out of the current loop (in which break is used)

20.
What is the purpose of the comma operator? Within which control statement does the comma operator usually appear?
Ans.
A comma operator is used to seperate multiple expressions in the for loop statement for initialisation and increment or decrement expressions.
eg:
for(i=0,j=12;i>j;i++,j--)
{

}

21.
In situations that the require evaluation of an expression containing the comma operator, which operator will determine the type and the value of the entire expression (i.e., the expression to the left of the comma operator or the expression to the right?)
Ans.
When we use comma operator to specify multiple expressions, the expressions are evaluated from left to right.

22.
What is the purpose of the goto statement? How is the associated target statement identified?
Ans.
A goto statement is used to make an unconditional jump in a program. The target statement is identified by a label.

23.
Why is the use of the goto statement generally discouraged? Under what conditions might the goto statement be helpful? What types of usage should be avoided and why? Discuss thoroughly.
Ans.
A goto statement should be avoided because it can lead to an uncontolled flow of execution within a program.
It is expected to write a C program that is well structured. A goto statment can lead to random jumps. Any thing that can be achieved using got can also be achieved using other features of C, like conditional execution by ef-else, jumping to the end of loop or beginning of loop using break and continue.
However got can be helpful in case we want to break out of a double nested loop which may otherwise require two conditional break statements
