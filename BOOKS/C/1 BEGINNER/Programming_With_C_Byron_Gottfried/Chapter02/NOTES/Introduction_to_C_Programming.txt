C elements
- Basic elements needed to construct C statements - C character set, identifiers, keyword, data types, statements, declaration expressions

C character set
- A-Z, a-z, 0-9, certain special symbols

escape sequence 
- set of characters that hold special meaning 
- used to represent certain non printable characters
- they have one ASCII value - they occupy one byte in memory - they represent a single character
- \n - newline
- \b - backspace
- \t - tab
- \0 - null character - marks end of each string

Identifier
- name given to program elements - variable name, function name, constant name
- must begin with alphabet, can contain numbers and underscore, should not contain special characters

keywords
- have special meaning
- written in small case letters
- their meaning is already known to the compiler
- should not use keyword as identifiers

library functions
- printf and scanf are library functions
- they are written by other programmers
- available with compilers
- they are available in binary format

format specifiers
- begin with %
- character after % determines what needs to be done
- %d is place holder for decimal (integer)

Datatype
- determines nature of data stored in the memory
- specipies amount of memory needed (in terms of bytes)
- specifies type of computation that can be performed on the data elements
- basic data types provided by the C programming language
char - signed, unsigned - 1 Byte
int - short, int, long, long long - 
windows (32 and 64 bit compilers)
short |int |long |long long
2, 	   4, 	4,    8
2, 	   4, 	4,    8
linux (32 and 64 bit compilers)
short |int |long |long long
2, 	   4, 	4,    8
2, 	   4, 	8,    8
float
double

integer constants
char - %hhd, %hhu, %hho, %hhx
short - %hd, %hu, %ho, %hx
int - %d, %u, %o, %x
long - %ld, %lu, %lo, %lx
double - %lld, %llu, %llo, %llx

floating point constants
- float data type is used to represent them
- they have decimal part and exponent part - represented as 2.5E5
- float occupies - 4 bytes
- double occupies - 8 bytes

character constant
- char - occupies 1 byte
- used to define single character in memory - enclosd in single quotes
- char ch = 'A';
- ASCII value of A is stored in memory - memory location is named as ch

string constant
- sequences of characters encolsed in double quotes
- it is one dimensional character array
- compiler adds \0 at the end of the string
- \0 is used to mark the end of the string - useful in devices that read character by character

variable
- name given to memory location
- its value in memory can change
eg: a = 10;
b = 20;
a = 30;

array
- sequence of data elements
- array contains same elements
- array elements - accessed by index - subscript - starts from 0
- array represented by [] - size must be specified
- string - is character array
- name of array represents address of first element of the array


variable declaration
- declaring the type of the variable - telling the data type to the compiler
- variable must be declared before it is used in a compute statement
- no memory allocation takes place when a variable is declared

expression
- represents single data element
- it can contain variables, constants and operators
- arithemetic expression, relational expression - it must evaluate to a single value

statement
- smallest logical unit of a program
- types of statements
expression statement - arithemetic statement and logical statement
control statement
compound statement - set of statements enclosed in {}
- statement ends with a semicolon

Symbolic constant
- name given to a constant
- name given to a value
- it is evaluated by preprocessor
- defined using following statement:
#define <name> <value>
- it does not end with a semicolon because it is not a true C statementS
- preprocessor replaces name of symbolic constant with value
- name should be in uppercase
- if symbolic constant is used within double quotes, it is not evaluated

preprocessor - first step in the translation of C program