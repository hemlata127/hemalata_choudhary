1.
What are the commonly used input/output functions in C? What additional instreuctions is to be written in a C program to use these?
Ans.
The commonly used input output functions in C are:
scanf(), printf()
getchar(), putchar()
gets(), puts()
These are library functions, so we need to include the header files for these functions at the beginning of the C program using the preprocessor directive #include<header file name>
Header file contains the declarations of the library functions.

2.
What happens when an end-of-file condition is encountered when reading characters with the getchar function? How is the end-of file recognised?
Ans.
When reading a character, end-of-file marks end of character input. The function puts the character read into the variable (the memory location). end-of-file condition for getchar() function is recognised by newline character (when an enter key is pressed after a character is entered)

3.
What is the purpose of scanf() function? How is it used within a C program? Compare with the getchar() function?
Ans.
scanf() function is used to read the input from keyboard in formatted manner. It can be used to read multiple data elements of different data types. Its syntax contains a control string which specifies the format specifiers and list of data element addresses. The input must be provided in correct order, number and data types.
getchar() function is used to read a singe character into a variable.

4.
What is the purpose of the control string in a scanf function? What type of information does it convey? Of what is the control string composed of?
Ans.
Control string in a scanf() function provides information about the data type of the input data elements. It consists of format specifiers which contains a % character followed by a character that determines the data type of the input element. This control string is enclosed in double quotes and is followed by list of variable addresses where the input data is to be stored.

5.
If a control string within a scanf function contains multiple character groups, how are the character groups seperated? Are white space characters required? If whitespace characters are present within a control string, how are they interpreted?
Ans.
If control strings in a scanf function contains multiple character groups they must be seperated by a whitespace.
eg: scanf("%c %c %c",&no1,&no2,&no3);
if no whitespace is specified in control string for multiple character groups, then white space while data input is interpreted as part of part of character group
eg: scanf("%c%c%c",&no1,&no2,&no3);
here if IP is 12 13 14
then no1 = 12, no2 = space (" "), no3 = 13

6.
Summarize the meaning of the more commonly used conversion characters within the control string of the scanf function
Ans.
%d - for int
%f - float
%lf - long float
%c - character
%s - string
%u - unsigned int
%h - short int
%l - long int
%lu - long unsigned int
%%hu - short unsigned int

7.
When entering data via scanf function, what relationship must there be between the data items and the corresponding arguments? How are multiple data items seperated from one another?
Ans.
When entering the data via scanf, the number of data items, type of data items and sequence of data items should match with what is specified in the scanf function.
Multiple data items must be seperated using a whitespace.

8.
When entering data via the scanf function, must octal data be preceded by o? Must hexadecimal data be preceded by 0x or 0X? How must floating point data be written?
Ans.
When entering data item via scanf function for octal and hexadecimal there is no need to prefix o or x for octal and hexadecimal respectively. It is specified in the control string as format specifier.
%f format specifier is used for the float data item.

9.
When entering a string via the scanf function using s-type conversion factor, how is the string terminated?
Ans.
When entering a string via scanf function using s-type conversion factor, the string is terminated by a whiespace character - usually a newline character

10.
When entering a string via the scanf function, how can a single string which includes whitespace character be entered?
Ans.
When entering a string via scanf function, a string with a whitespace character can be entered using following syntax:
scanf("%[^\n]s",str);
This will accept a string till a newline character (enter) is pressed

11.
Summarise a convenient method for entering a string of undetermined length, which may contain whitespace characters and all printable and which is terminated by a carriage return. Answer this question to the type conversion required within the control string of a scanf function.
Ans.
scanf("%[^\n]s",str);
This statement will accept a string from keyboard that contains all characters except newline. Hence end of sring input will be marked by pressing an enter key.

12.
What is meant by a field? How can the maximum field width for a data item be specified within scanf function?
Ans.
Consecutive non whitespace characters that form part of data element. In scanf function we can specify the field maximum width.
eg:
scanf("%10d",&num);

13.
What happens if an input data item contains more characters than the maximum allowable field width? What is the data item contains fewer characters?
Ans.
If the data item contains more characters than maximum allowable field width, then the ramianing characters are not read into the variable. These left over characters may be read into subsequent data item.
But if the entered data item contains lesser number of characters then those many characters are read into the varaiable.
eg:
scanf("%3d",&num);
if IP = 12345, num contains 123
if IP = 12, num contains 12

14.
How can short integer, long integer and double precision argument be indicated within the control string of a scanf function?
Ans.
short integer - %h
long integer - %l
double precision - %lf

15.
How can the assignment of an input data item supressed to its corresponding argument be?
Ans:
Assignment supression of input data item can be achieved using assignment supression feature.
This involves using * between % and conversion character in the control string.
eg:
scanf("%d %*d %d",&num1,&num2,&num3);
IP data is 10, 20, 30
then num1 is assigned 10, num3 is assigned 30 but num2 is not assigned 20.

16.
What is the purpose of the printf function? How is it used in a C program? Compare with the putchar function.
Ans.
printf is a library function that is used to output data on the standard out put device. It is used to display a formatted string, it can be used to display multiple data items of different data types. It contains a control string as one of its argument. Control string contains the format specifiers for different data items. Remaining arguments are the list of varaibles whose values are to be displayed in place of the format specifiers.
outchar is a library function that will display a single character on the standard output device.

17.
In what ways does the control string within the printf function differ from the control string within the scanf function?
Ans.
The control string in printf function can contan a string (sequence of characters to be displayed) along with format specifiers embedded into it. Control string in scanf function contains only format specifiers.
eg:
printf("Addition of %d and %d is %d\n",num1,num2,ans);
scanf("%d %d %d",&num1,&num2,&num3);

18.
If control string within the printf function contains multiple character groups, how are the character groups seperacted? How are the seperators interpreted?
Ans.
Multiple character groups in a printf function can be seperated using any characters including whitespace characters. These seperators are interpreted literally.
eg:
printf("%d\t%d \n",num1,num2);

19.
Summarise the meaning of the more commonly used conversion characters within the control string of the printf function. Compare with the conversion characters used in the scanf function.
Ans.
%d - int
%f - float
%c - char
%s - string
%h - short
%u - unsigned int
%hu - short unsigned int
%l - long
%lu - long unsigned int
%hhu - unsigned byte
%llu - unsigned long long int
%lf - long float
%x - hexadecimal
%o - octal
%e - e type conversion
same conversion characters are used in the scanf function.

20.
In a printf function, arguments other than the control string must be preceded by ampersands?
Compare with the scanf function and explain any differences.
Ans.
In a printf function to display the value of data item - variable, no need to use ampersand before the data element name. Ampersand should be used only if we want to print the address of the data element. In scanf function the argument is preceded by & because we want to specify the address of the variable where the input data item should be stored in the memory

21.
What is the difference between f type conversion, e type conversion and g type conversion when outputting floating point data using the printf function.
Ans.
In f type conversion, the floating point number is displayed in normal floatong point format that uses decimal point and not exponent eg: 3.141593
In e type conversion the floating point number is displayed in scentific notation that uses e or E 3.14e7
In g type conversion

22.
Compare the use of s type conversion with the printf and scanf functions. How does s type conversion difer when processing strings containing whitespace characters?
Ans.
s type conversion is used to accept string in scanf function and display string in printf function.
In scanf function %s is used to accept string as sequence of non white space characters. In order to use scanf to accept string containing whitespace characters, some adjustment is needed as follows:
scanf("%[^\n]s",str);
In printf function, %s is used as conversion character to display strings containg whitespace characters.

23.
How can the minimum field width be specified for a data item in printf function?
Ans.
Minimum field width can be specified between the % and the conversion character in the control string of the printf function.
eg:
printf("%5d",123456);

24.
What happens if the output data item contains more characters than the minimum field width? What if the data item contains fewer characters. Contrast with the field width specification in the scanf function.
Ans.
If the width of the data item is more that minimum field width specified in control string of the printf function for that data item, then the field width is extended to accomodate the extra characters. The extra characters are not trimmed. If there are fewer characters the unoccupied field is padded with space while displaying the data item.
In scanf function if the width of the input data item is more than the maximum field width specified, then remaining characters are left out and are not read into the memory reserved for the data item.

25.
What is meant by the precision of the output data item? To what types of data does this apply? How can the precision be specified within the printf function.
Ans.
Prcision is the maximum number of decimal places to be displayed in the output of floating point number and maximum number of characters to be displayed in a string data item. Precision is specified between % and control character. It is always preceded by a decimal point. It can also be specified along with the minimum field width specifier.
eg:
printf("%5.3f",123.445666);
output = 123.445
char str[] = "helloworld";
printf("%7.10s",);
output = helloworld

26.
What happens to a floating point number if it will be shortened to conform to a precision specification? What happens to a string.
Ans.
A floating point number is rounded off
A string is trimmed

27.
How can short integer, long integer and double precision arguments be indicated within the control string of a printf function? How can long double arguments be indicated?
Ans.
%h - short integer
%l - long integer
%lf - double
%llf - long double

28.
Summarize the purpose of the flags that are commonly used within the printf function.
Ans.
- left justify the display of data item
+ explicitly specify the sign of an integer
0 padd zeor instead of blanks
" blank place holder for sign
# for octal and hexadecimal use o and 0x explicitly

29.
Summarize the use of the gets and puts functions to transfer strings between a computer ans standard input/output devices. Compare the use of these functions with the string transfer features in the scanf and printf statements.
Ans.
gets is used to accept a string from the input device
puts library function is used to display a string on output device
These two library functions do not support formatting. printf and scanf supports formatting
